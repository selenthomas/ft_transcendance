worker_processes 1;

events {
    worker_connections 1024;
}

http {
    server {
        listen 8483 ssl;
        listen [::]:8483 ssl;
        server_name ${HOST};

        access_log /dev/null;
        error_log /dev/null;

        ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
        ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

        # En-têtes de sécurité HTTP
        # Empêche les navigateurs d'interpréter les fichiers comme un autre type MIME pour lequel ils ont été servis.
        add_header X-Content-Type-Options "nosniff";

        # Empêche le contenu de votre site d'être inclus dans un cadre (iframe), ce qui peut empêcher certaines attaques de type clickjacking.
        add_header X-Frame-Options "DENY";

        # Active le filtre XSS intégré du navigateur.
        add_header X-XSS-Protection "1; mode=block";

        # Définit les politiques de sécurité du contenu pour contrôler les sources de contenu autorisées.
        # Autoriser uniquement les ressources nécessaires (Back / WSS / bootstrap)
        add_header Content-Security-Policy "
            default-src 'self' wss://${HOST}:8443/* https://${HOST}:8443 https://${HOST}:8483 https://cdn.intra.42.fr;
            script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://stackpath.bootstrapcdn.com https://${HOST}:8443 https://${HOST}:8443/* https://${HOST}:8483 https://cdn.intra.42.fr;
            style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://stackpath.bootstrapcdn.com;
            img-src 'self' data: blob:;
            font-src 'self' https://cdn.jsdelivr.net https://stackpath.bootstrapcdn.com;
            connect-src 'self' blob: https://${HOST}:8443 https://${HOST}:8443 wss://${HOST}:8443 https://${HOST}:8483 https://cdn.intra.42.fr;
            frame-ancestors 'none';
            base-uri 'self';
            form-action 'self';
        ";

        # Configuration pour servir les images
        location /avatar/ {
            # Utilise alias pour spécifier le chemin réel où sont stockées les images.
            alias /frontend/public/avatar/;
            
            # Définir les types MIME pour les images afin que Nginx puisse les servir correctement.
            types {
                image/jpeg jpeg jpg;
                image/png png;
                image/gif gif;
                image/svg+xml svg svgz;
                image/webp webp;
                image/x-icon ico;
                image/vnd.microsoft.icon cur;
            }

            # Configure les en-têtes HTTP pour permettre aux navigateurs de mettre en cache les images pendant 30 jours.
            expires 30d;
            add_header Cache-Control "public";
        }

        # Configuration pour servir l'icône du site (favicon)
        location = /favicon.ico {
            # Utilise alias pour spécifier le chemin réel où est stockée l'icône.
            alias /frontend/public/icon/icon.png;

            # Définir le type MIME pour l'icône
            types {
                image/x-icon ico;
            }

            # Configure les en-têtes HTTP pour permettre aux navigateurs de mettre en cache l'icône pendant 30 jours.
            expires 30d;
            add_header Cache-Control "public";
        }

        # Configuration pour le proxy pass vers le frontend
        location / {
            proxy_pass http://frontend:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_cache_bypass $http_upgrade;
        }
    }

    server {
        listen 8443 ssl;
        listen [::]:8443 ssl;
        server_name ${HOST};

        access_log /dev/null;
        error_log /dev/null;

        ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
        ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

        # Configuration pour le proxy pass vers le backend
        location / {
            proxy_pass http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_cache_bypass $http_upgrade;
        }

        # Configuration pour le proxy pass vers les WebSockets du backend
        location /ws/ {
            proxy_pass http://backend:8000/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_cache_bypass $http_upgrade;
        }
    }
}
